# Generated by Django 5.2.4 on 2025-09-06 19:19

import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('image', models.ImageField(upload_to='category_images/')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('full_name', models.CharField(blank=True, help_text='Enter your full name as you want it displayed', max_length=200, verbose_name='full name')),
                ('email', models.EmailField(max_length=200, unique=True, verbose_name='email address')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='bio')),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True, unique=True, verbose_name='phone number')),
                ('avatar', models.ImageField(blank=True, default='avatar.svg', null=True, upload_to='', verbose_name='avatar')),
                ('location', models.CharField(blank=True, help_text='City or region (e.g., Hargeisa)', max_length=255, verbose_name='location')),
                ('email_verified', models.BooleanField(default=False, verbose_name='email verified')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Ad',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('location', models.CharField(max_length=255)),
                ('ad_type', models.CharField(choices=[('sell', 'Sell'), ('rent', 'Rent'), ('exchange', 'Exchange'), ('service', 'Service'), ('job', 'Job'), ('other', 'Other')], default='sell', max_length=10)),
                ('description', models.TextField(blank=True)),
                ('views', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('model', models.CharField(blank=True, max_length=100, null=True)),
                ('color', models.CharField(blank=True, max_length=50, null=True)),
                ('year', models.PositiveIntegerField(blank=True, null=True)),
                ('num_rooms', models.PositiveIntegerField(blank=True, help_text='Whole numbers only (e.g. 3)', null=True)),
                ('num_baths', models.PositiveIntegerField(blank=True, help_text='Whole numbers only (e.g. 2)', null=True)),
                ('area_size', models.PositiveIntegerField(blank=True, help_text='Whole numbers only (e.g. 2)', null=True)),
                ('furnishing_type', models.CharField(blank=True, choices=[('fully_furnished', 'Fully Furnished'), ('semi_furnished', 'Semi Furnished'), ('unfurnished', 'Unfurnished')], max_length=20, null=True)),
                ('property_type', models.CharField(blank=True, choices=[('apartment', 'Apartment'), ('house', 'House'), ('villa', 'Villa'), ('condo', 'Condo'), ('commercial', 'Commercial'), ('office', 'Office Space'), ('warehouse', 'Warehouse'), ('farmhouse', 'Farm House')], max_length=20, null=True)),
                ('has_parking', models.BooleanField(default=False)),
                ('has_pool', models.BooleanField(default=False)),
                ('has_water', models.BooleanField(default=False)),
                ('has_electricity', models.BooleanField(default=False)),
                ('land_type', models.CharField(blank=True, choices=[('residential', 'Residential'), ('agricultural', 'Agricultural'), ('commercial', 'Commercial'), ('industrial', 'Industrial')], max_length=20, null=True)),
                ('land_area', models.PositiveIntegerField(blank=True, help_text='Whole numbers only (e.g. 0.5)', null=True)),
                ('vehicle_type', models.CharField(blank=True, choices=[('car', 'Car'), ('motorcycle', 'Motorcycle'), ('bus', 'Bus'), ('truck', 'Truck')], max_length=20, null=True)),
                ('motortype', models.CharField(blank=True, max_length=100, null=True)),
                ('geartype', models.CharField(blank=True, max_length=100, null=True)),
                ('is_automatic', models.BooleanField(default=False)),
                ('electronics_type', models.CharField(blank=True, choices=[('phone', 'Mobile Phone'), ('laptop', 'Laptop'), ('tablet', 'Tablet'), ('camera', 'Camera'), ('tv', 'TV'), ('audio', 'Audio Equipment'), ('gaming', 'Gaming Console'), ('smart_home', 'Smart Home Devices')], max_length=20, null=True)),
                ('operating_system', models.CharField(blank=True, choices=[('android', 'Android'), ('ios', 'iOS'), ('windows', 'Windows'), ('other', 'Other')], max_length=20, null=True)),
                ('storage_capacity', models.CharField(blank=True, max_length=20, null=True)),
                ('screen_size', models.DecimalField(blank=True, decimal_places=2, help_text='Screen size in inches', max_digits=5, null=True)),
                ('ram', models.CharField(blank=True, max_length=20, null=True)),
                ('processor', models.CharField(blank=True, max_length=100, null=True)),
                ('camera_resolution', models.CharField(blank=True, max_length=50, null=True)),
                ('electronics_condition', models.CharField(blank=True, choices=[('new', 'New'), ('second_hand', 'Second Hand')], max_length=20, null=True)),
                ('has_warranty', models.BooleanField(default=False)),
                ('warranty_period', models.CharField(blank=True, max_length=50, null=True)),
                ('sim_type', models.CharField(blank=True, choices=[('single', 'Single SIM'), ('dual', 'Dual SIM'), ('e_sim', 'eSIM')], max_length=20, null=True)),
                ('job_type', models.CharField(blank=True, choices=[('full_time', 'Full Time'), ('part_time', 'Part Time'), ('contract', 'Contract'), ('internship', 'Internship'), ('remote', 'Remote')], max_length=20, null=True)),
                ('salary', models.CharField(blank=True, max_length=100, null=True)),
                ('experience_required', models.CharField(blank=True, max_length=100, null=True)),
                ('education_required', models.CharField(blank=True, max_length=100, null=True)),
                ('service_type', models.CharField(blank=True, choices=[('cleaning', 'Cleaning'), ('moving', 'Moving & Storage'), ('repair', 'Repair & Maintenance'), ('it', 'IT Services'), ('beauty', 'Beauty & Wellness'), ('tutoring', 'Tutoring & Lessons')], max_length=20, null=True)),
                ('service_area', models.CharField(blank=True, max_length=255, null=True)),
                ('availability', models.CharField(blank=True, max_length=100, null=True)),
                ('fashion_type', models.CharField(blank=True, choices=[('men', "Men's Fashion"), ('women', "Women's Fashion"), ('kids', "Kids' Fashion"), ('watches', 'Watches'), ('jewelry', 'Jewelry'), ('bags', 'Bags & Accessories')], max_length=20, null=True)),
                ('size', models.CharField(blank=True, max_length=20, null=True)),
                ('material', models.CharField(blank=True, max_length=100, null=True)),
                ('is_approved', models.BooleanField(default=False)),
                ('is_featured', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=10)),
                ('advertiser', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.category')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AdImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='ad_images/')),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='base.ad')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='base.ad')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='base.comment')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('saved_at', models.DateTimeField(auto_now_add=True)),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorited_by', to='base.ad')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-saved_at'],
            },
        ),
        migrations.CreateModel(
            name='FeaturedAd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_screenshot', models.ImageField(upload_to='payment_screenshots/')),
                ('featured_start_date', models.DateTimeField(default=django.utils.timezone.now)),
                ('featured_expiry_date', models.DateTimeField()),
                ('ad', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='featuredad', to='base.ad')),
            ],
        ),
        migrations.CreateModel(
            name='FeaturedAdHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount_paid', models.DecimalField(decimal_places=2, max_digits=10)),
                ('payment_screenshot', models.ImageField(upload_to='payment_screenshots/')),
                ('featured_date', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField()),
                ('ad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='featured_history', to='base.ad')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('notification_type', models.CharField(choices=[('approval', 'Ad Approved'), ('rejection', 'Ad Rejected'), ('featured', 'Ad Featured'), ('info', 'Information'), ('warning', 'Warning')], max_length=20)),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('ad', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='base.ad')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PendingFeaturedAd',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('payment_screenshot', models.ImageField(upload_to='payment_screenshots/')),
                ('featured_start_date', models.DateTimeField()),
                ('featured_expiry_date', models.DateTimeField()),
                ('ad', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pending_featured', to='base.ad')),
            ],
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['is_featured'], name='base_ad_is_feat_fa4b4e_idx'),
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['status'], name='base_ad_status_b74e60_idx'),
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['ad_type'], name='base_ad_ad_type_a79855_idx'),
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['category'], name='base_ad_categor_41713a_idx'),
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['price'], name='base_ad_price_7de148_idx'),
        ),
        migrations.AddIndex(
            model_name='ad',
            index=models.Index(fields=['created_at'], name='base_ad_created_e761ba_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='favorite',
            unique_together={('user', 'ad')},
        ),
    ]
